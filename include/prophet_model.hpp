
// Code generated by stanc fa623df
#include <stan/model/model_header.hpp>
namespace prophet_model_namespace {


inline void validate_positive_index(const char* var_name, const char* expr,
                                    int val) {
  if (val < 1) {
    std::stringstream msg;
    msg << "Found dimension size less than one in simplex declaration"
        << "; variable=" << var_name << "; dimension size expression=" << expr
        << "; expression value=" << val;
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}

inline void validate_unit_vector_index(const char* var_name, const char* expr,
                                       int val) {
  if (val <= 1) {
    std::stringstream msg;
    if (val == 1) {
      msg << "Found dimension size one in unit vector declaration."
          << " One-dimensional unit vector is discrete"
          << " but the target distribution must be continuous."
          << " variable=" << var_name << "; dimension size expression=" << expr;
    } else {
      msg << "Found dimension size less than one in unit vector declaration"
          << "; variable=" << var_name << "; dimension size expression=" << expr
          << "; expression value=" << val;
    }
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}


using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using std::pow;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using stan::model::cons_list;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::nil_index_list;
using namespace stan::math;
using stan::math::pow; 

stan::math::profile_map profiles__;
static int current_statement__= 0;
static const std::vector<string> locations_array__ = {" (found before start of program)",
                                                      " (in 'examples/prophet/prophet.stan', line 109, column 2 to column 9)",
                                                      " (in 'examples/prophet/prophet.stan', line 110, column 2 to column 9)",
                                                      " (in 'examples/prophet/prophet.stan', line 111, column 2 to column 18)",
                                                      " (in 'examples/prophet/prophet.stan', line 112, column 2 to column 26)",
                                                      " (in 'examples/prophet/prophet.stan', line 113, column 2 to column 17)",
                                                      " (in 'examples/prophet/prophet.stan', line 117, column 2 to column 18)",
                                                      " (in 'examples/prophet/prophet.stan', line 123, column 4 to column 29)",
                                                      " (in 'examples/prophet/prophet.stan', line 122, column 35 to line 124, column 3)",
                                                      " (in 'examples/prophet/prophet.stan', line 122, column 9 to line 124, column 3)",
                                                      " (in 'examples/prophet/prophet.stan', line 121, column 4 to column 64)",
                                                      " (in 'examples/prophet/prophet.stan', line 120, column 35 to line 122, column 3)",
                                                      " (in 'examples/prophet/prophet.stan', line 120, column 9 to line 124, column 3)",
                                                      " (in 'examples/prophet/prophet.stan', line 119, column 4 to column 54)",
                                                      " (in 'examples/prophet/prophet.stan', line 118, column 28 to line 120, column 3)",
                                                      " (in 'examples/prophet/prophet.stan', line 118, column 2 to line 124, column 3)",
                                                      " (in 'examples/prophet/prophet.stan', line 129, column 2 to column 19)",
                                                      " (in 'examples/prophet/prophet.stan', line 130, column 2 to column 19)",
                                                      " (in 'examples/prophet/prophet.stan', line 131, column 2 to column 37)",
                                                      " (in 'examples/prophet/prophet.stan', line 132, column 2 to column 29)",
                                                      " (in 'examples/prophet/prophet.stan', line 133, column 2 to column 27)",
                                                      " (in 'examples/prophet/prophet.stan', line 136, column 2 to line 141, column 4)",
                                                      " (in 'examples/prophet/prophet.stan', line 88, column 2 to column 8)",
                                                      " (in 'examples/prophet/prophet.stan', line 89, column 2 to column 17)",
                                                      " (in 'examples/prophet/prophet.stan', line 90, column 9 to column 10)",
                                                      " (in 'examples/prophet/prophet.stan', line 90, column 2 to column 14)",
                                                      " (in 'examples/prophet/prophet.stan', line 91, column 9 to column 10)",
                                                      " (in 'examples/prophet/prophet.stan', line 91, column 2 to column 16)",
                                                      " (in 'examples/prophet/prophet.stan', line 92, column 9 to column 10)",
                                                      " (in 'examples/prophet/prophet.stan', line 92, column 2 to column 14)",
                                                      " (in 'examples/prophet/prophet.stan', line 93, column 2 to column 8)",
                                                      " (in 'examples/prophet/prophet.stan', line 94, column 9 to column 10)",
                                                      " (in 'examples/prophet/prophet.stan', line 94, column 2 to column 21)",
                                                      " (in 'examples/prophet/prophet.stan', line 95, column 9 to column 10)",
                                                      " (in 'examples/prophet/prophet.stan', line 95, column 11 to column 12)",
                                                      " (in 'examples/prophet/prophet.stan', line 95, column 2 to column 16)",
                                                      " (in 'examples/prophet/prophet.stan', line 96, column 9 to column 10)",
                                                      " (in 'examples/prophet/prophet.stan', line 96, column 2 to column 19)",
                                                      " (in 'examples/prophet/prophet.stan', line 97, column 2 to column 20)",
                                                      " (in 'examples/prophet/prophet.stan', line 98, column 2 to column 22)",
                                                      " (in 'examples/prophet/prophet.stan', line 99, column 9 to column 10)",
                                                      " (in 'examples/prophet/prophet.stan', line 99, column 2 to column 16)",
                                                      " (in 'examples/prophet/prophet.stan', line 100, column 9 to column 10)",
                                                      " (in 'examples/prophet/prophet.stan', line 100, column 2 to column 16)",
                                                      " (in 'examples/prophet/prophet.stan', line 104, column 9 to column 10)",
                                                      " (in 'examples/prophet/prophet.stan', line 104, column 12 to column 13)",
                                                      " (in 'examples/prophet/prophet.stan', line 104, column 2 to column 17)",
                                                      " (in 'examples/prophet/prophet.stan', line 105, column 2 to column 48)",
                                                      " (in 'examples/prophet/prophet.stan', line 111, column 9 to column 10)",
                                                      " (in 'examples/prophet/prophet.stan', line 113, column 9 to column 10)",
                                                      " (in 'examples/prophet/prophet.stan', line 117, column 9 to column 10)",
                                                      " (in 'examples/prophet/prophet.stan', line 9, column 11 to column 12)",
                                                      " (in 'examples/prophet/prophet.stan', line 9, column 14 to column 15)",
                                                      " (in 'examples/prophet/prophet.stan', line 9, column 4 to column 19)",
                                                      " (in 'examples/prophet/prophet.stan', line 10, column 15 to column 16)",
                                                      " (in 'examples/prophet/prophet.stan', line 10, column 4 to column 24)",
                                                      " (in 'examples/prophet/prophet.stan', line 11, column 4 to column 15)",
                                                      " (in 'examples/prophet/prophet.stan', line 14, column 4 to column 28)",
                                                      " (in 'examples/prophet/prophet.stan', line 15, column 4 to column 33)",
                                                      " (in 'examples/prophet/prophet.stan', line 16, column 4 to column 15)",
                                                      " (in 'examples/prophet/prophet.stan', line 21, column 8 to column 26)",
                                                      " (in 'examples/prophet/prophet.stan', line 22, column 8 to column 28)",
                                                      " (in 'examples/prophet/prophet.stan', line 20, column 58 to line 23, column 7)",
                                                      " (in 'examples/prophet/prophet.stan', line 20, column 6 to line 23, column 7)",
                                                      " (in 'examples/prophet/prophet.stan', line 24, column 6 to column 19)",
                                                      " (in 'examples/prophet/prophet.stan', line 19, column 19 to line 25, column 5)",
                                                      " (in 'examples/prophet/prophet.stan', line 19, column 4 to line 25, column 5)",
                                                      " (in 'examples/prophet/prophet.stan', line 26, column 4 to column 13)",
                                                      " (in 'examples/prophet/prophet.stan', line 7, column 73 to line 27, column 3)",
                                                      " (in 'examples/prophet/prophet.stan', line 32, column 11 to column 12)",
                                                      " (in 'examples/prophet/prophet.stan', line 32, column 4 to column 20)",
                                                      " (in 'examples/prophet/prophet.stan', line 33, column 11 to column 16)",
                                                      " (in 'examples/prophet/prophet.stan', line 33, column 4 to column 22)",
                                                      " (in 'examples/prophet/prophet.stan', line 34, column 4 to column 14)",
                                                      " (in 'examples/prophet/prophet.stan', line 37, column 4 to column 51)",
                                                      " (in 'examples/prophet/prophet.stan', line 40, column 4 to column 13)",
                                                      " (in 'examples/prophet/prophet.stan', line 42, column 6 to column 66)",
                                                      " (in 'examples/prophet/prophet.stan', line 43, column 6 to column 29)",
                                                      " (in 'examples/prophet/prophet.stan', line 41, column 19 to line 44, column 5)",
                                                      " (in 'examples/prophet/prophet.stan', line 41, column 4 to line 44, column 5)",
                                                      " (in 'examples/prophet/prophet.stan', line 45, column 4 to column 17)",
                                                      " (in 'examples/prophet/prophet.stan', line 31, column 78 to line 46, column 3)",
                                                      " (in 'examples/prophet/prophet.stan', line 58, column 11 to column 12)",
                                                      " (in 'examples/prophet/prophet.stan', line 58, column 4 to column 20)",
                                                      " (in 'examples/prophet/prophet.stan', line 60, column 4 to column 53)",
                                                      " (in 'examples/prophet/prophet.stan', line 61, column 4 to column 70)",
                                                      " (in 'examples/prophet/prophet.stan', line 57, column 4 to line 62, column 3)",
                                                      " (in 'examples/prophet/prophet.stan', line 74, column 4 to column 65)",
                                                      " (in 'examples/prophet/prophet.stan', line 73, column 4 to line 75, column 3)",
                                                      " (in 'examples/prophet/prophet.stan', line 83, column 4 to column 28)",
                                                      " (in 'examples/prophet/prophet.stan', line 82, column 4 to line 84, column 3)"};


template <typename T0__, typename T1__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>,
stan::value_type_t<T1__>>, -1, -1>
get_changepoint_matrix(const T0__& t_arg__, const T1__& t_change_arg__,
                       const int& T, const int& S, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::value_type_t<T0__>,
          stan::value_type_t<T1__>>;
  const auto& t = to_ref(t_arg__);
  const auto& t_change = to_ref(t_change_arg__);
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 51;
    validate_non_negative_index("A", "T", T);
    current_statement__ = 52;
    validate_non_negative_index("A", "S", S);
    Eigen::Matrix<local_scalar_t__, -1, -1> A;
    A = Eigen::Matrix<local_scalar_t__, -1, -1>(T, S);
    stan::math::fill(A, DUMMY_VAR__);
    
    current_statement__ = 54;
    validate_non_negative_index("a_row", "S", S);
    Eigen::Matrix<local_scalar_t__, 1, -1> a_row;
    a_row = Eigen::Matrix<local_scalar_t__, 1, -1>(S);
    stan::math::fill(a_row, DUMMY_VAR__);
    
    int cp_idx;
    cp_idx = std::numeric_limits<int>::min();
    
    current_statement__ = 57;
    assign(A, nil_index_list(), rep_matrix(0, T, S), "assigning variable A");
    current_statement__ = 58;
    assign(a_row, nil_index_list(), rep_row_vector(0, S),
      "assigning variable a_row");
    current_statement__ = 59;
    cp_idx = 1;
    current_statement__ = 66;
    for (int i = 1; i <= T; ++i) {
      current_statement__ = 63;
      while ((primitive_value(logical_lte(cp_idx, S)) && primitive_value(
             logical_gte(t[(i - 1)], t_change[(cp_idx - 1)])))) {
        current_statement__ = 60;
        assign(a_row, cons_list(index_uni(cp_idx), nil_index_list()), 1,
          "assigning variable a_row");
        current_statement__ = 61;
        cp_idx = (cp_idx + 1);
      }
      current_statement__ = 64;
      assign(A, cons_list(index_uni(i), nil_index_list()), a_row,
        "assigning variable A");}
    current_statement__ = 67;
    return A;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct get_changepoint_matrix_functor__ {
template <typename T0__, typename T1__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>,
stan::value_type_t<T1__>>, -1, -1>
operator()(const T0__& t, const T1__& t_change, const int& T, const int& S,
           std::ostream* pstream__)  const 
{
return get_changepoint_matrix(t, t_change, T, S, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__, typename T3__>
Eigen::Matrix<stan::promote_args_t<T0__, T1__, stan::value_type_t<T2__>,
stan::value_type_t<T3__>>, -1, 1>
logistic_gamma(const T0__& k, const T1__& m, const T2__& delta_arg__,
               const T3__& t_change_arg__, const int& S,
               std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__,
          T1__,
          stan::value_type_t<T2__>,
          stan::value_type_t<T3__>>;
  const auto& delta = to_ref(delta_arg__);
  const auto& t_change = to_ref(t_change_arg__);
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 69;
    validate_non_negative_index("gamma", "S", S);
    Eigen::Matrix<local_scalar_t__, -1, 1> gamma;
    gamma = Eigen::Matrix<local_scalar_t__, -1, 1>(S);
    stan::math::fill(gamma, DUMMY_VAR__);
    
    current_statement__ = 71;
    validate_non_negative_index("k_s", "S + 1", (S + 1));
    Eigen::Matrix<local_scalar_t__, -1, 1> k_s;
    k_s = Eigen::Matrix<local_scalar_t__, -1, 1>((S + 1));
    stan::math::fill(k_s, DUMMY_VAR__);
    
    local_scalar_t__ m_pr;
    m_pr = DUMMY_VAR__;
    
    current_statement__ = 74;
    assign(k_s, nil_index_list(),
      append_row(k, add(k, cumulative_sum(delta))), "assigning variable k_s");
    current_statement__ = 75;
    m_pr = m;
    current_statement__ = 79;
    for (int i = 1; i <= S; ++i) {
      current_statement__ = 76;
      assign(gamma, cons_list(index_uni(i), nil_index_list()),
        ((t_change[(i - 1)] - m_pr) *
          (1 - (k_s[(i - 1)] / k_s[((i + 1) - 1)]))),
        "assigning variable gamma");
      current_statement__ = 77;
      m_pr = (m_pr + gamma[(i - 1)]);}
    current_statement__ = 80;
    return gamma;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct logistic_gamma_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__>
Eigen::Matrix<stan::promote_args_t<T0__, T1__, stan::value_type_t<T2__>,
stan::value_type_t<T3__>>, -1, 1>
operator()(const T0__& k, const T1__& m, const T2__& delta,
           const T3__& t_change, const int& S, std::ostream* pstream__)  const 
{
return logistic_gamma(k, m, delta, t_change, S, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__, typename T3__,
typename T4__, typename T5__, typename T6__>
Eigen::Matrix<stan::promote_args_t<T0__, T1__, stan::value_type_t<T2__>,
stan::value_type_t<T3__>,
stan::value_type_t<T4__>, stan::promote_args_t<stan::value_type_t<T5__>,
stan::value_type_t<T6__>>>, -1, 1>
logistic_trend(const T0__& k, const T1__& m, const T2__& delta_arg__,
               const T3__& t_arg__, const T4__& cap_arg__,
               const T5__& A_arg__, const T6__& t_change_arg__, const int& S,
               std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__,
          T1__,
          stan::value_type_t<T2__>,
          stan::value_type_t<T3__>,
          stan::value_type_t<T4__>, stan::promote_args_t<stan::value_type_t<T5__>,
          stan::value_type_t<T6__>>>;
  const auto& delta = to_ref(delta_arg__);
  const auto& t = to_ref(t_arg__);
  const auto& cap = to_ref(cap_arg__);
  const auto& A = to_ref(A_arg__);
  const auto& t_change = to_ref(t_change_arg__);
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 82;
    validate_non_negative_index("gamma", "S", S);
    Eigen::Matrix<local_scalar_t__, -1, 1> gamma;
    gamma = Eigen::Matrix<local_scalar_t__, -1, 1>(S);
    stan::math::fill(gamma, DUMMY_VAR__);
    
    current_statement__ = 84;
    assign(gamma, nil_index_list(),
      logistic_gamma(k, m, delta, t_change, S, pstream__),
      "assigning variable gamma");
    current_statement__ = 85;
    return elt_multiply(cap,
             inv_logit(
               elt_multiply(add(k, multiply(A, delta)),
                 subtract(t, add(m, multiply(A, gamma))))));
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct logistic_trend_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__,
typename T4__, typename T5__, typename T6__>
Eigen::Matrix<stan::promote_args_t<T0__, T1__, stan::value_type_t<T2__>,
stan::value_type_t<T3__>,
stan::value_type_t<T4__>, stan::promote_args_t<stan::value_type_t<T5__>,
stan::value_type_t<T6__>>>, -1, 1>
operator()(const T0__& k, const T1__& m, const T2__& delta, const T3__& t,
           const T4__& cap, const T5__& A, const T6__& t_change,
           const int& S, std::ostream* pstream__)  const 
{
return logistic_trend(k, m, delta, t, cap, A, t_change, S, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__, typename T3__,
typename T4__, typename T5__>
Eigen::Matrix<stan::promote_args_t<T0__, T1__, stan::value_type_t<T2__>,
stan::value_type_t<T3__>,
stan::value_type_t<T4__>, stan::promote_args_t<stan::value_type_t<T5__>>>, -1, 1>
linear_trend(const T0__& k, const T1__& m, const T2__& delta_arg__,
             const T3__& t_arg__, const T4__& A_arg__,
             const T5__& t_change_arg__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__,
          T1__,
          stan::value_type_t<T2__>,
          stan::value_type_t<T3__>,
          stan::value_type_t<T4__>, stan::promote_args_t<stan::value_type_t<T5__>>>;
  const auto& delta = to_ref(delta_arg__);
  const auto& t = to_ref(t_arg__);
  const auto& A = to_ref(A_arg__);
  const auto& t_change = to_ref(t_change_arg__);
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 87;
    return add(elt_multiply(add(k, multiply(A, delta)), t),
             add(m, multiply(A, elt_multiply(minus(t_change), delta))));
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct linear_trend_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__,
typename T4__, typename T5__>
Eigen::Matrix<stan::promote_args_t<T0__, T1__, stan::value_type_t<T2__>,
stan::value_type_t<T3__>,
stan::value_type_t<T4__>, stan::promote_args_t<stan::value_type_t<T5__>>>, -1, 1>
operator()(const T0__& k, const T1__& m, const T2__& delta, const T3__& t,
           const T4__& A, const T5__& t_change, std::ostream* pstream__)  const 
{
return linear_trend(k, m, delta, t, A, t_change, pstream__);
}
};

template <typename T0__>
Eigen::Matrix<stan::promote_args_t<T0__>, -1, 1>
flat_trend(const T0__& m, const int& T, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 89;
    return rep_vector(m, T);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct flat_trend_functor__ {
template <typename T0__>
Eigen::Matrix<stan::promote_args_t<T0__>, -1, 1>
operator()(const T0__& m, const int& T, std::ostream* pstream__)  const 
{
return flat_trend(m, T, pstream__);
}
};

class prophet_model final : public model_base_crtp<prophet_model> {

 private:
  int T;
  int K;
  Eigen::Matrix<double, -1, 1> t;
  Eigen::Matrix<double, -1, 1> cap;
  Eigen::Matrix<double, -1, 1> y;
  int S;
  Eigen::Matrix<double, -1, 1> t_change;
  Eigen::Matrix<double, -1, -1> X;
  Eigen::Matrix<double, -1, 1> sigmas;
  double tau;
  int trend_indicator;
  Eigen::Matrix<double, -1, 1> s_a;
  Eigen::Matrix<double, -1, 1> s_m;
  Eigen::Matrix<double, -1, -1> A;
 
 public:
  ~prophet_model() { }
  
  inline std::string model_name() const final { return "prophet_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 fa623df", "stancflags = "};
  }
  
  
  prophet_model(stan::io::var_context& context__,
                unsigned int random_seed__ = 0,
                std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static const char* function__ = "prophet_model_namespace::prophet_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 22;
      context__.validate_dims("data initialization","T","int",
          context__.to_vec());
      T = std::numeric_limits<int>::min();
      
      current_statement__ = 22;
      T = context__.vals_i("T")[(1 - 1)];
      current_statement__ = 23;
      context__.validate_dims("data initialization","K","int",
          context__.to_vec());
      K = std::numeric_limits<int>::min();
      
      current_statement__ = 23;
      K = context__.vals_i("K")[(1 - 1)];
      current_statement__ = 23;
      current_statement__ = 23;
      check_greater_or_equal(function__, "K", K, 1);
      current_statement__ = 24;
      validate_non_negative_index("t", "T", T);
      current_statement__ = 25;
      context__.validate_dims("data initialization","t","double",
          context__.to_vec(T));
      t = Eigen::Matrix<double, -1, 1>(T);
      stan::math::fill(t, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> t_flat__;
        current_statement__ = 25;
        assign(t_flat__, nil_index_list(), context__.vals_r("t"),
          "assigning variable t_flat__");
        current_statement__ = 25;
        pos__ = 1;
        current_statement__ = 25;
        for (int sym1__ = 1; sym1__ <= T; ++sym1__) {
          current_statement__ = 25;
          assign(t, cons_list(index_uni(sym1__), nil_index_list()),
            t_flat__[(pos__ - 1)], "assigning variable t");
          current_statement__ = 25;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 26;
      validate_non_negative_index("cap", "T", T);
      current_statement__ = 27;
      context__.validate_dims("data initialization","cap","double",
          context__.to_vec(T));
      cap = Eigen::Matrix<double, -1, 1>(T);
      stan::math::fill(cap, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> cap_flat__;
        current_statement__ = 27;
        assign(cap_flat__, nil_index_list(), context__.vals_r("cap"),
          "assigning variable cap_flat__");
        current_statement__ = 27;
        pos__ = 1;
        current_statement__ = 27;
        for (int sym1__ = 1; sym1__ <= T; ++sym1__) {
          current_statement__ = 27;
          assign(cap, cons_list(index_uni(sym1__), nil_index_list()),
            cap_flat__[(pos__ - 1)], "assigning variable cap");
          current_statement__ = 27;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 28;
      validate_non_negative_index("y", "T", T);
      current_statement__ = 29;
      context__.validate_dims("data initialization","y","double",
          context__.to_vec(T));
      y = Eigen::Matrix<double, -1, 1>(T);
      stan::math::fill(y, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> y_flat__;
        current_statement__ = 29;
        assign(y_flat__, nil_index_list(), context__.vals_r("y"),
          "assigning variable y_flat__");
        current_statement__ = 29;
        pos__ = 1;
        current_statement__ = 29;
        for (int sym1__ = 1; sym1__ <= T; ++sym1__) {
          current_statement__ = 29;
          assign(y, cons_list(index_uni(sym1__), nil_index_list()),
            y_flat__[(pos__ - 1)], "assigning variable y");
          current_statement__ = 29;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 30;
      context__.validate_dims("data initialization","S","int",
          context__.to_vec());
      S = std::numeric_limits<int>::min();
      
      current_statement__ = 30;
      S = context__.vals_i("S")[(1 - 1)];
      current_statement__ = 31;
      validate_non_negative_index("t_change", "S", S);
      current_statement__ = 32;
      context__.validate_dims("data initialization","t_change","double",
          context__.to_vec(S));
      t_change = Eigen::Matrix<double, -1, 1>(S);
      stan::math::fill(t_change, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> t_change_flat__;
        current_statement__ = 32;
        assign(t_change_flat__, nil_index_list(),
          context__.vals_r("t_change"), "assigning variable t_change_flat__");
        current_statement__ = 32;
        pos__ = 1;
        current_statement__ = 32;
        for (int sym1__ = 1; sym1__ <= S; ++sym1__) {
          current_statement__ = 32;
          assign(t_change, cons_list(index_uni(sym1__), nil_index_list()),
            t_change_flat__[(pos__ - 1)], "assigning variable t_change");
          current_statement__ = 32;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 33;
      validate_non_negative_index("X", "T", T);
      current_statement__ = 34;
      validate_non_negative_index("X", "K", K);
      current_statement__ = 35;
      context__.validate_dims("data initialization","X","double",
          context__.to_vec(T, K));
      X = Eigen::Matrix<double, -1, -1>(T, K);
      stan::math::fill(X, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> X_flat__;
        current_statement__ = 35;
        assign(X_flat__, nil_index_list(), context__.vals_r("X"),
          "assigning variable X_flat__");
        current_statement__ = 35;
        pos__ = 1;
        current_statement__ = 35;
        for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
          current_statement__ = 35;
          for (int sym2__ = 1; sym2__ <= T; ++sym2__) {
            current_statement__ = 35;
            assign(X,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              X_flat__[(pos__ - 1)], "assigning variable X");
            current_statement__ = 35;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 36;
      validate_non_negative_index("sigmas", "K", K);
      current_statement__ = 37;
      context__.validate_dims("data initialization","sigmas","double",
          context__.to_vec(K));
      sigmas = Eigen::Matrix<double, -1, 1>(K);
      stan::math::fill(sigmas, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> sigmas_flat__;
        current_statement__ = 37;
        assign(sigmas_flat__, nil_index_list(), context__.vals_r("sigmas"),
          "assigning variable sigmas_flat__");
        current_statement__ = 37;
        pos__ = 1;
        current_statement__ = 37;
        for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
          current_statement__ = 37;
          assign(sigmas, cons_list(index_uni(sym1__), nil_index_list()),
            sigmas_flat__[(pos__ - 1)], "assigning variable sigmas");
          current_statement__ = 37;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 38;
      context__.validate_dims("data initialization","tau","double",
          context__.to_vec());
      tau = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 38;
      tau = context__.vals_r("tau")[(1 - 1)];
      current_statement__ = 38;
      current_statement__ = 38;
      check_greater_or_equal(function__, "tau", tau, 0);
      current_statement__ = 39;
      context__.validate_dims("data initialization","trend_indicator","int",
          context__.to_vec());
      trend_indicator = std::numeric_limits<int>::min();
      
      current_statement__ = 39;
      trend_indicator = context__.vals_i("trend_indicator")[(1 - 1)];
      current_statement__ = 40;
      validate_non_negative_index("s_a", "K", K);
      current_statement__ = 41;
      context__.validate_dims("data initialization","s_a","double",
          context__.to_vec(K));
      s_a = Eigen::Matrix<double, -1, 1>(K);
      stan::math::fill(s_a, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> s_a_flat__;
        current_statement__ = 41;
        assign(s_a_flat__, nil_index_list(), context__.vals_r("s_a"),
          "assigning variable s_a_flat__");
        current_statement__ = 41;
        pos__ = 1;
        current_statement__ = 41;
        for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
          current_statement__ = 41;
          assign(s_a, cons_list(index_uni(sym1__), nil_index_list()),
            s_a_flat__[(pos__ - 1)], "assigning variable s_a");
          current_statement__ = 41;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 42;
      validate_non_negative_index("s_m", "K", K);
      current_statement__ = 43;
      context__.validate_dims("data initialization","s_m","double",
          context__.to_vec(K));
      s_m = Eigen::Matrix<double, -1, 1>(K);
      stan::math::fill(s_m, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> s_m_flat__;
        current_statement__ = 43;
        assign(s_m_flat__, nil_index_list(), context__.vals_r("s_m"),
          "assigning variable s_m_flat__");
        current_statement__ = 43;
        pos__ = 1;
        current_statement__ = 43;
        for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
          current_statement__ = 43;
          assign(s_m, cons_list(index_uni(sym1__), nil_index_list()),
            s_m_flat__[(pos__ - 1)], "assigning variable s_m");
          current_statement__ = 43;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 44;
      validate_non_negative_index("A", "T", T);
      current_statement__ = 45;
      validate_non_negative_index("A", "S", S);
      current_statement__ = 46;
      A = Eigen::Matrix<double, -1, -1>(T, S);
      stan::math::fill(A, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 47;
      assign(A, nil_index_list(),
        get_changepoint_matrix(t, t_change, T, S, pstream__),
        "assigning variable A");
      current_statement__ = 48;
      validate_non_negative_index("delta", "S", S);
      current_statement__ = 49;
      validate_non_negative_index("beta", "K", K);
      current_statement__ = 50;
      validate_non_negative_index("trend", "T", T);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 0U;
    
    try {
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += S;
      num_params_r__ += 1;
      num_params_r__ += K;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI, stan::require_vector_like_t<VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    static const char* function__ = "prophet_model_namespace::log_prob";
(void) function__;  // suppress unused var warning

    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning

    
    try {
      local_scalar_t__ k;
      k = DUMMY_VAR__;
      
      current_statement__ = 1;
      k = in__.scalar();
      local_scalar_t__ m;
      m = DUMMY_VAR__;
      
      current_statement__ = 2;
      m = in__.scalar();
      Eigen::Matrix<local_scalar_t__, -1, 1> delta;
      delta = Eigen::Matrix<local_scalar_t__, -1, 1>(S);
      stan::math::fill(delta, DUMMY_VAR__);
      
      current_statement__ = 3;
      delta = in__.vector(S);
      local_scalar_t__ sigma_obs;
      sigma_obs = DUMMY_VAR__;
      
      current_statement__ = 4;
      sigma_obs = in__.scalar();
      current_statement__ = 4;
      if (jacobian__) {
        current_statement__ = 4;
        sigma_obs = stan::math::lb_constrain(sigma_obs, 0, lp__);
      } else {
        current_statement__ = 4;
        sigma_obs = stan::math::lb_constrain(sigma_obs, 0);
      }
      Eigen::Matrix<local_scalar_t__, -1, 1> beta;
      beta = Eigen::Matrix<local_scalar_t__, -1, 1>(K);
      stan::math::fill(beta, DUMMY_VAR__);
      
      current_statement__ = 5;
      beta = in__.vector(K);
      Eigen::Matrix<local_scalar_t__, -1, 1> trend;
      trend = Eigen::Matrix<local_scalar_t__, -1, 1>(T);
      stan::math::fill(trend, DUMMY_VAR__);
      
      current_statement__ = 15;
      if (logical_eq(trend_indicator, 0)) {
        current_statement__ = 13;
        assign(trend, nil_index_list(),
          linear_trend(k, m, delta, t, A, t_change, pstream__),
          "assigning variable trend");
      } else {
        current_statement__ = 12;
        if (logical_eq(trend_indicator, 1)) {
          current_statement__ = 10;
          assign(trend, nil_index_list(),
            logistic_trend(k, m, delta, t, cap, A, t_change, S, pstream__),
            "assigning variable trend");
        } else {
          current_statement__ = 9;
          if (logical_eq(trend_indicator, 2)) {
            current_statement__ = 7;
            assign(trend, nil_index_list(), flat_trend(m, T, pstream__),
              "assigning variable trend");
          } 
        }
      }
      {
        current_statement__ = 16;
        lp_accum__.add(normal_lpdf<propto__>(k, 0, 5));
        current_statement__ = 17;
        lp_accum__.add(normal_lpdf<propto__>(m, 0, 5));
        current_statement__ = 18;
        lp_accum__.add(double_exponential_lpdf<propto__>(delta, 0, tau));
        current_statement__ = 19;
        lp_accum__.add(normal_lpdf<propto__>(sigma_obs, 0, 0.5));
        current_statement__ = 20;
        lp_accum__.add(normal_lpdf<propto__>(beta, 0, sigmas));
        current_statement__ = 21;
        lp_accum__.add(
          normal_lpdf<propto__>(y,
            add(
              elt_multiply(trend,
                add(1, multiply(X, elt_multiply(beta, s_m)))),
              multiply(X, elt_multiply(beta, s_a))), sigma_obs));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr>
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    static const char* function__ = "prophet_model_namespace::write_array";
(void) function__;  // suppress unused var warning

    (void) function__;  // suppress unused var warning

    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning

    
    try {
      double k;
      k = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      k = in__.scalar();
      double m;
      m = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      m = in__.scalar();
      Eigen::Matrix<double, -1, 1> delta;
      delta = Eigen::Matrix<double, -1, 1>(S);
      stan::math::fill(delta, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 3;
      delta = in__.vector(S);
      double sigma_obs;
      sigma_obs = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 4;
      sigma_obs = in__.scalar();
      current_statement__ = 4;
      sigma_obs = stan::math::lb_constrain(sigma_obs, 0);
      Eigen::Matrix<double, -1, 1> beta;
      beta = Eigen::Matrix<double, -1, 1>(K);
      stan::math::fill(beta, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 5;
      beta = in__.vector(K);
      Eigen::Matrix<double, -1, 1> trend;
      trend = Eigen::Matrix<double, -1, 1>(T);
      stan::math::fill(trend, std::numeric_limits<double>::quiet_NaN());
      
      vars__.emplace_back(k);
      vars__.emplace_back(m);
      for (int sym1__ = 1; sym1__ <= S; ++sym1__) {
        vars__.emplace_back(delta[(sym1__ - 1)]);}
      vars__.emplace_back(sigma_obs);
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        vars__.emplace_back(beta[(sym1__ - 1)]);}
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 15;
      if (logical_eq(trend_indicator, 0)) {
        current_statement__ = 13;
        assign(trend, nil_index_list(),
          linear_trend(k, m, delta, t, A, t_change, pstream__),
          "assigning variable trend");
      } else {
        current_statement__ = 12;
        if (logical_eq(trend_indicator, 1)) {
          current_statement__ = 10;
          assign(trend, nil_index_list(),
            logistic_trend(k, m, delta, t, cap, A, t_change, S, pstream__),
            "assigning variable trend");
        } else {
          current_statement__ = 9;
          if (logical_eq(trend_indicator, 2)) {
            current_statement__ = 7;
            assign(trend, nil_index_list(), flat_trend(m, T, pstream__),
              "assigning variable trend");
          } 
        }
      }
      if (emit_transformed_parameters__) {
        for (int sym1__ = 1; sym1__ <= T; ++sym1__) {
          vars__.emplace_back(trend[(sym1__ - 1)]);}
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, stan::require_std_vector_t<VecVar>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      double k;
      k = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      k = context__.vals_r("k")[(1 - 1)];
      double m;
      m = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      m = context__.vals_r("m")[(1 - 1)];
      Eigen::Matrix<double, -1, 1> delta;
      delta = Eigen::Matrix<double, -1, 1>(S);
      stan::math::fill(delta, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> delta_flat__;
        current_statement__ = 3;
        assign(delta_flat__, nil_index_list(), context__.vals_r("delta"),
          "assigning variable delta_flat__");
        current_statement__ = 3;
        pos__ = 1;
        current_statement__ = 3;
        for (int sym1__ = 1; sym1__ <= S; ++sym1__) {
          current_statement__ = 3;
          assign(delta, cons_list(index_uni(sym1__), nil_index_list()),
            delta_flat__[(pos__ - 1)], "assigning variable delta");
          current_statement__ = 3;
          pos__ = (pos__ + 1);}
      }
      double sigma_obs;
      sigma_obs = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 4;
      sigma_obs = context__.vals_r("sigma_obs")[(1 - 1)];
      double sigma_obs_free__;
      sigma_obs_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 4;
      sigma_obs_free__ = stan::math::lb_free(sigma_obs, 0);
      Eigen::Matrix<double, -1, 1> beta;
      beta = Eigen::Matrix<double, -1, 1>(K);
      stan::math::fill(beta, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> beta_flat__;
        current_statement__ = 5;
        assign(beta_flat__, nil_index_list(), context__.vals_r("beta"),
          "assigning variable beta_flat__");
        current_statement__ = 5;
        pos__ = 1;
        current_statement__ = 5;
        for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
          current_statement__ = 5;
          assign(beta, cons_list(index_uni(sym1__), nil_index_list()),
            beta_flat__[(pos__ - 1)], "assigning variable beta");
          current_statement__ = 5;
          pos__ = (pos__ + 1);}
      }
      vars__.emplace_back(k);
      vars__.emplace_back(m);
      for (int sym1__ = 1; sym1__ <= S; ++sym1__) {
        vars__.emplace_back(delta[(sym1__ - 1)]);}
      vars__.emplace_back(sigma_obs_free__);
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        vars__.emplace_back(beta[(sym1__ - 1)]);}
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__.clear();
    names__.emplace_back("k");
    names__.emplace_back("m");
    names__.emplace_back("delta");
    names__.emplace_back("sigma_obs");
    names__.emplace_back("beta");
    names__.emplace_back("trend");
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    dimss__.clear();
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(S)});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(K)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(T)});
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "k");
    param_names__.emplace_back(std::string() + "m");
    for (int sym1__ = 1; sym1__ <= S; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "delta" + '.' + std::to_string(sym1__));
      }}
    param_names__.emplace_back(std::string() + "sigma_obs");
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "beta" + '.' + std::to_string(sym1__));
      }}
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= T; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "trend" + '.' + std::to_string(sym1__));
        }}
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "k");
    param_names__.emplace_back(std::string() + "m");
    for (int sym1__ = 1; sym1__ <= S; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "delta" + '.' + std::to_string(sym1__));
      }}
    param_names__.emplace_back(std::string() + "sigma_obs");
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "beta" + '.' + std::to_string(sym1__));
      }}
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= T; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "trend" + '.' + std::to_string(sym1__));
        }}
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"k\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"m\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"delta\",\"type\":{\"name\":\"vector\",\"length\":" << S << "},\"block\":\"parameters\"},{\"name\":\"sigma_obs\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"beta\",\"type\":{\"name\":\"vector\",\"length\":" << K << "},\"block\":\"parameters\"},{\"name\":\"trend\",\"type\":{\"name\":\"vector\",\"length\":" << T << "},\"block\":\"transformed_parameters\"}]";
    return s__.str();
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"k\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"m\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"delta\",\"type\":{\"name\":\"vector\",\"length\":" << S << "},\"block\":\"parameters\"},{\"name\":\"sigma_obs\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"beta\",\"type\":{\"name\":\"vector\",\"length\":" << K << "},\"block\":\"parameters\"},{\"name\":\"trend\",\"type\":{\"name\":\"vector\",\"length\":" << T << "},\"block\":\"transformed_parameters\"}]";
    return s__.str();
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i) {
        vars.coeffRef(i) = vars_vec[i];
      }
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
  

    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i) {
        params_r.coeffRef(i) = params_r_vec[i];
      }
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }        

};
}
using stan_model = prophet_model_namespace::prophet_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return prophet_model_namespace::profiles__;
}

#endif


